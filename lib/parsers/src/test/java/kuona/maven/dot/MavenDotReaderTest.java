package kuona.maven.dot;


import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@DisplayName("Parsing DOT file generated by maven")
class MavenDotReaderTest {
  @Test
  @DisplayName("Accepts an empty file")
  void readsEmptyFile() {

    var stream = new ByteArrayInputStream("".getBytes(StandardCharsets.UTF_8));
    var result = MavenDotReader.readDependencies(stream);

    assertTrue(result.isEmpty());
  }

  @Test
  @DisplayName("Accepts a file with no DOT depenencies")
  void readsEmptyDependencyFile() {
    final var input = "digraph \"com.grahambrooks:nio-socket-server:jar:1.0-SNAPSHOT\" {  }";
    var stream = new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8));
    var result = MavenDotReader.readDependencies(stream);

    var root = (Map<String, String>) result.get("root");
    assertEquals("com.grahambrooks:nio-socket-server:jar:1.0-SNAPSHOT", root.get("id"));
  }

  @Test
  @DisplayName("Accepts a file with dependencies")
  void readsDependencies() {
    final var input = "digraph \"com.grahambrooks:nio-socket-server:jar:1.0-SNAPSHOT\" { \n" +
      "\t\"com.grahambrooks:nio-socket-server:jar:1.0-SNAPSHOT\" -> \"junit:junit:jar:4.12:test\" ; \n" +
      "\t\"com.grahambrooks:nio-socket-server:jar:1.0-SNAPSHOT\" -> \"org.assertj:assertj-core:jar:3.6.2:test\" ; \n" +
      "\t\"junit:junit:jar:4.12:test\" -> \"org.hamcrest:hamcrest-core:jar:1.3:test\" ; \n" +
      "}";

    var stream = new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8));
    var result = MavenDotReader.readDependencies(stream);

    var dependencies = (List<Map>) result.get("dependencies");
    assertEquals(3, dependencies.size());

  }
}
